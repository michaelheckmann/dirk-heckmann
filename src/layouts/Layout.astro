---
export interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;

import { getMeta } from "@lib/getData";
import { getLangFromUrl } from "@lib/i18n";
import { SEO } from "astro-seo";

const lang = getLangFromUrl(Astro.url);
const { fields: meta } = await getMeta(lang);
console.log("meta:", meta.favicon?.fields.file?.url || "./favicon.svg");
---

<!DOCTYPE html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link
      rel="icon"
      type="image/svg+xml"
      href={meta.favicon?.fields.file?.url || "./favicon.svg"}
    />
    <meta name="generator" content={Astro.generator} />
    <SEO
      title={title}
      description={description}
      twitter={{
        title,
        description,
        image: meta.ogImage?.fields.file?.url,
        imageAlt: title,
      }}
      openGraph={{
        basic: {
          title,
          image: meta.ogImage?.fields.file?.url || "",
          url: Astro.url.toString(),
          type: "website",
        },
        optional: {
          description,
          locale: lang === "de" ? "de_DE" : "en_US",
        },
        image: {
          url: meta.ogImage?.fields.file?.url || "",
          width: meta.ogImage?.fields.file?.details.image?.width || 0,
          height: meta.ogImage?.fields.file?.details.image?.height || 0,
          alt: title,
          type: meta.ogImage?.fields.file?.contentType || "",
        },
      }}
    />
  </head>
  <body class="bg-gray-50 w-full h-full overflow-x-hidden">
    <div class="w-full p-8 flex justify-end text-xs uppercase font-semibold">
      <a
        href={lang === "de" ? `/en/` : `/de/`}
        class="text-gray-500 hover:text-gray-900 transition-colors duration-200 ease-in-out"
        >{lang === "de" ? "English" : "Deutsch"}</a
      >
    </div>
    <div id="blob1"></div>
    <div id="blob2"></div>
    <div id="blob3"></div>
    <div id="noiseLayer"></div>
    <svg
      viewBox="0 0 500 500"
      preserveAspectRatio="none"
      xmlns="http://www.w3.org/2000/svg"
      style="display: none;"
    >
      <filter id="noiseFilter">
        <feTurbulence
          type="fractalNoise"
          baseFrequency=".75"
          numOctaves="2"
          stitchTiles="stitch"></feTurbulence>
      </filter>
    </svg>
    <slot />
    <style>
      :root {
        --blur-amount: 70px;
      }

      #blob1 {
        width: 50vw;
        height: 50vw;
        border-radius: 75% 90%;
        background-color: rgb(143, 108, 159);
        transform: rotate(19deg);
        filter: blur(var(--blur-amount));
        opacity: 0.15;
        z-index: -2;

        position: fixed;
        top: 25vh;
        left: -10vw;
      }

      #blob2 {
        position: fixed;
        z-index: -2;
        border-radius: 50% 33%;
        background-color: rgb(204, 231, 227);
        filter: blur(var(--blur-amount));
        opacity: 0.12;

        width: 70vw;
        height: 60vw;
        top: 50%;
        left: 20%;
      }

      #blob3 {
        position: fixed;
        z-index: -2;
        border-radius: 45% 40%;
        background-color: rgb(199, 196, 222);
        filter: blur(var(--blur-amount));
        mix-blend-mode: overlay;

        width: 45vw;
        height: 50vh;
        top: 0%;
        right: 0%;
      }

      #noiseLayer {
        position: fixed;
        filter: url(#noiseFilter) brightness(0.4) contrast(1.1);
        mix-blend-mode: overlay;
        z-index: -1;

        width: 100%;
        height: 100%;
        top: 0%;
        left: 0;
      }
    </style>
  </body>
</html>
